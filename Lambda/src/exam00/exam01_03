[1] 람다식에 대한 설명으로 틀린 것은?
정답: 4번
해설: @FuntionalInterface 기술되지 앟은 인터페이스라도 추상메소드가 한 개이면 람다식으로 표현이 가능하다.

1. 람다식은 함수적 인터페이스의 익명 구현 객체를 생성한다
2. 매개 변수가 없을 경우 () -> {...} 형태로 작성한다
3. (x,y) -> {return x+y;}는 (x,y) -> x+y로 바꿀 수 있다.
4. @FuntionalInterface가 기술된 인터페이스만 람다식으로 표현이 가능하다

[2] 메소드 참조에 대한 설명으로 틀린 것은?
정답: 4번
해설: 람다식에서 생성자 오버로딩에 의해 다양한 생성자를 호출할 수 있다.
	  Function<>.apply(...)에 명시된 파라미터와 생성자의 파라미터가 매치된다.
	  
1. 메소드 참조는 함수적 인터페이스의 익명 구현 개체를 생성한다
2. 인스턴스 메소드는 "참조변수::메소드"로 기술한다
3. 정적 메소드는 "클래스::메소드"로 기술한다
4. 생성자 참조인 "클래스::new"는 매개 변수가 없는 디폴트 생성자만 호출한다

[3] 잘못 작성된 람다식은 무엇입니까?
정답: 2번
해설:

1. a -> a+3
2. a,b -> a*b
3. x -> System.out.println(x/5)
4. (x,y) -> Math.max(x,y)